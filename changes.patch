diff --git a/backend/cmd/coraza-spoa/main.go b/backend/cmd/coraza-spoa/main.go
index 2b6cab2f..aa1d92cc 100644
--- a/backend/cmd/coraza-spoa/main.go
+++ b/backend/cmd/coraza-spoa/main.go
@@ -3,27 +3,30 @@ package main
 import (
 	"log"
 
-	"coraza-waf/backend/internal/agent"
-	"coraza-waf/backend/pkg/database"
-
 	"github.com/corazawaf/coraza/v3"
+	"coraza-waf/backend/internal/spoa"
+	"coraza-waf/backend/pkg/database"
 )
 
 func main() {
+	// 初始化 WAF
 	waf, err := coraza.NewWAF(coraza.NewWAFConfig())
 	if err != nil {
 		log.Fatalf("Failed to create WAF: %v", err)
 	}
 
+	// 初始化 MongoDB（你可能用的是 localhost:27017）
 	mongo, err := database.NewMongoService("mongodb://localhost:27017", "wafdb", "waflogs")
 	if err != nil {
 		log.Fatalf("Failed to connect MongoDB: %v", err)
 	}
 
-	handler := agent.NewAgent(waf, mongo)
+	// 启动 SPOE Server（注意传入 addr）
+	server := spoa.NewServer("127.0.0.1:12345", waf, mongo)
 
-	if err := agent.StartServer("127.0.0.1:12345", handler); err != nil {
-		log.Fatalf("Failed to start SPOE server: %v", err)
+	// 正确调用 Run()
+	if err := server.Run(); err != nil {
+		log.Fatalf("SPOE Server error: %v", err)
 	}
 }
 
diff --git a/backend/exit b/backend/exit
deleted file mode 100644
index e69de29b..00000000
diff --git a/backend/pkg/database/mongo_service.go b/backend/pkg/database/mongo_service.go
index 9ee02817..fb99c8d0 100644
--- a/backend/pkg/database/mongo_service.go
+++ b/backend/pkg/database/mongo_service.go
@@ -3,42 +3,56 @@ package database
 import (
 	"context"
 	"time"
-	"log"
 
 	"go.mongodb.org/mongo-driver/mongo"
 	"go.mongodb.org/mongo-driver/mongo/options"
-
-	"coraza-waf/backend/pkg/logging"
+	"go.mongodb.org/mongo-driver/mongo/writeconcern"
 )
 
+// MongoService 封装 MongoDB 操作
 type MongoService struct {
 	client     *mongo.Client
 	collection *mongo.Collection
+	ctx        context.Context
+	cancel     context.CancelFunc
 }
 
-func NewMongoService(uri, dbName, collName string) (*MongoService, error) {
+// NewMongoService 初始化 MongoService，参数：uri, 数据库名, 集合名
+func NewMongoService(uri, dbName, collectionName string) (*MongoService, error) {
 	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
-	defer cancel()
+	clientOptions := options.Client().ApplyURI(uri).SetWriteConcern(writeconcern.New(writeconcern.WMajority()))
 
-	clientOpts := options.Client().ApplyURI(uri)
-	client, err := mongo.Connect(ctx, clientOpts)
+	client, err := mongo.Connect(ctx, clientOptions)
 	if err != nil {
+		cancel()
+		return nil, err
+	}
+
+	// Ping 确认连接
+	if err := client.Ping(ctx, nil); err != nil {
+		cancel()
 		return nil, err
 	}
 
-	coll := client.Database(dbName).Collection(collName)
-	return &MongoService{client: client, collection: coll}, nil
+	collection := client.Database(dbName).Collection(collectionName)
+
+	return &MongoService{
+		client:     client,
+		collection: collection,
+		ctx:        ctx,
+		cancel:     cancel,
+	}, nil
 }
 
-func (m *MongoService) InsertLog(logEntry *logging.WafLog) error {
-	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
-	defer cancel()
+// InsertLog 插入日志文档
+func (m *MongoService) InsertLog(document interface{}) error {
+	_, err := m.collection.InsertOne(m.ctx, document)
+	return err
+}
 
-	_, err := m.collection.InsertOne(ctx, logEntry)
-	if err != nil {
-		log.Printf("Mongo InsertOne error: %v", err)
-		return err
-	}
-	return nil
+// Close 断开连接，释放资源
+func (m *MongoService) Close() error {
+	m.cancel()
+	return m.client.Disconnect(m.ctx)
 }
 
diff --git a/backend/sedikjnne b/backend/sedikjnne
deleted file mode 100644
index e69de29b..00000000
